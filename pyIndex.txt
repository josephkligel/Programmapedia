# Python Index
## Basics
data types: String(str), Integer(int), Boolean(bool), List/arrays
	bool: 'True' or 'False' values (no 'true' or 'false')
	type(): prints the datatype of an argument
	Conversion: int(), str(), list(), tuple()
	Slice: x[start:stop:step]. Works for any data type

String: s.lower(), replace(s,ch), s.capitalize, s.upper, s[:], 
		s.strip, s.lstrip, s.rstrip, s.islower, 
		s.isupper, s.split("arg"), max(s)

'()': tuples. Immutable, add comma at the end as convention
	methods: del(tp), tp[index], tp.count(arg) 

'[]' Or list(): List of values
	methods: len(ls), ls.insert(index, arg), ls.remove(arg), 
		ls.pop(), del(arg), ls.clear(), ls.reverse(), 
		ls.sort(), ls.append(), ls.count(arg)

'{}' Or set(): Set of values. No repetition of values
 
'{}': Dictionaries if they have key/value pairs. 
	disclaimer: String keys have to be in quotes
	methods: d[k], d.get(k), d.pop(k), d.clear(), del(d), d.keys(), d.values(), d.items -> prints k,v, d.update(k:v)

Operators: Typical, single programming operators, while the rest have exceptions
	reassignment: +=, -=, /=, or *= (no ++ or --)
	logical: and, or, not/! (no && or ||)

Overload Operators: 'def __add__(self, other)' 

Functions: Functions start with the word 'def' and are loosely typed
	keyword arg: e.g. 'sum(arg2=3, arg1=10'
	default arg: e.g. 'def sum(arg1=10, arg2)' 10 is default until specified
	multi-args: put '*' infront of arg, e.g. 'prints(arg, *arg2)'
	multi-key args: put '**' infront of arg, e.g. 'prints(arg, **arg2)
		disclaimer: Remember to print of key/value pairs for each multi-arg
		
OOP:	Encapsulation, abstraction, polymorphism, inheritance, classes, and instances

Encapsulation: 
	Private: double underscore preceding the name. Can only be called through a self method
	Partially private: single underscore preceeding

Inheritance: e.g. 'class Square(Polygon)' instead of 'extends' keyword
	Child class is derived from parent class. Parent class is the base class

Classes: uses '__init__' method to initialize an instance and self is used in replacement of 'this'
	Standards: Class names should be in Camelcase 'ThisIsExample'

Instances: are objects of a class, e.g. Honda is a car
	Should be all lowercase 'honda'
	Words in an instance var name should be seperated with an underscore
	Non-public inst var should begin with a single underscore
	For private var, two underscores begin the name


Modules: Module names should always be in lowercase
	math: pow(), e, pi, log, log10, log2
	os: System("google-chrome google.com"), mkdir, rmdir, rename, 
		getcwd
	shutil: copy() 
	datetime: strftime(), today(), strptime()
	sys: stdout.write()
	

Escape characters: Put a back slash before the character to be escaped
	characters: \\, \", \', \n, \t

Concatenation: You can concatenate strings/chars and even multiply them
	Tips: print function automatically adds spaces between arguments

Placeholders: Use numbers in curly brackets or % w/ letter (%d,%s,%2f)
		Examples: print('They are {0} and {1}'.format(x,y))
			  print('They are %d and %d' % x, y)

I/O: input()
	file: open(<filename>, opt) opt: 'w', 'a', 'r'

Help: help(), dir(__builtins__), help(<fname>), dir(<fname>)

Comments: # for single comments, and """ """ for multiple-line quotes

Error: To try and catch errors
	try: 'try:'
	catch: 'except Exception as e:'
